package examSchedule;
import java.util.Vector;
import examSchedule.parser.EnvironmentInterface;
import examSchedule.parser.ExamSchedulePredicates;
import examSchedule.parser.Pair;
import examSchedule.parser.Predicate.ParamType;
import examSchedule.parser.PredicateReader;
import examSchedule.parser.SolutionInterface;

/**
 * @author Group 4 - Mike Hung, Nick Pylypow, Jeremy Kyle Delima
 * 
 * 
 */
public class Environment extends PredicateReader implements
		ExamSchedulePredicates, EnvironmentInterface {

	public static EnvironmentInterface eInter;
	public static Vector<Course> courses = new Vector<Course>();
	public static Vector<Instructor> instructors = new Vector<Instructor>();
	public static Vector<Student> students = new Vector<Student>();
	public static Vector<String> days = new Vector<String>();
	public static Vector<Room> rooms = new Vector<Room>();
	public static Vector<Session> sessions = new Vector<Session>();
	
	
	/**
	 * Constructor for Environment.
	 * @param name is the name of object
	 */
	public Environment(String name) {
		super(name);
	}

	/**
	 * @param search is the search method
	 * @param control is our control
	 * @param maxTime is the maximum time to do the search
	 */
	@Override
	public void a_search(String search, String control, Long maxTime) {
		// TODO Auto-generated method stub
	}

	@Override
	public SolutionInterface getCurrentSolution() {
		return null;
	}

	@Override
	public void setCurrentSolution(SolutionInterface currentSolution) {
		// TODO Auto-generated method stub

	}
	
	/**
	 * 	Asserts a new student if the student doesn't exist.
	 */
	@Override	
	public void a_student(String p) {
		if (!e_student(p))
			students.add(new Student(p));
	}

	@Override
	public boolean e_student(String p) {
		for (Student student : students) {
			if (student.getName().equals(p))
				return true;
		}
		return false;
	}

	/**
	 * 	Asserts a new instructor if the instructor doesn't exist.
	 */	
	@Override
	public void a_instructor(String p) {
		if (!e_instructor(p))
			instructors.add(new Instructor(p));
	}

	@Override
	public boolean e_instructor(String p) {
		for (Instructor instructor : instructors) {
			if (instructor.getName().equals(p))
				return true;
		}
		return false;
	}
	
	/**
	 * 	Asserts a new room if the room doesn't exist.
	 */
	@Override
	public void a_room(String p) {
		if (!e_room(p))
			rooms.add(new Room(p));

	}

	@Override
	public boolean e_room(String p) {
		for (Room room : rooms) {
			if (room.getName().equals(p))
				return true;
		}
		return false;
	}

	/**
	 * 	Asserts a new course if the course doesn't exist.
	 */
	@Override
	public void a_course(String p) {
		if (!e_course(p)) {
			courses.add(new Course(p));
		}
	}

	@Override
	public boolean e_course(String p) {
		for (Course course : courses) {
			if (course.getName().equals(p)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 	Asserts a new session if the session doesn't exist.
	 */
	@Override
	public void a_session(String p) {
		if (!e_session(p)) {
			sessions.add(new Session(p));
		}
	}

	@Override
	public boolean e_session(String p) {
		for (Session session : sessions) {
			if (session.getName().equals(p))
				return true;
		}
		return false;
	}

	/**
	 * 	Asserts a new day if the day doesn't exist.
	 */
	@Override
	public void a_day(String p) {
		if (!e_day(p))
			days.add(p);

	}

	@Override
	public boolean e_day(String p) {
		for (String day : days) {
			if (day.equals(p)) {
				return true;
			}
		}
		return false;
	}

	/**
	 * 	Asserts a new lecture if the lecture doesn't exist.
	 */
	@Override
	public void a_lecture(String c, String lec) {
		a_course(c);
		for (Course course : courses) {
			if (course.getName().equals(c)) {
				if (!course.hasLecture(lec))
					course.addLecture(new Lecture(c, lec));
			}
		}
	}

	@Override
	public boolean e_lecture(String c, String lec) {
		if (e_course(c)) {
			for (Course course : courses) {
				if (c.equals(course.getName())) {
					return course.hasLecture(lec);
				}
			}
		}
		return false;
	}

	/**
	 * 	Updates the lecture with a course name and lecture name.
	 */
	@Override
	public void a_lecture(String c, String lec, String instructor, Long length) {
		Course course = null;
		Instructor instr = null;

		a_course(c);
		a_instructor(instructor);
		a_lecture(c, lec);

		for (Course crs : courses) {
			if (c.equals(crs.getName())) {
				course = crs;
			}
		}

		for (Instructor ins : instructors) {
			if (ins.getName().equals(instructor))
				instr = ins;
		}

		Lecture lecture = course.findLecture(lec);
		lecture.setInstructor(instr);
		lecture.setExamLength(length);

	}

	/**
	 * 	Assigns the instructor with a course, and lecture.
	 */
	@Override
	public void a_instructs(String p, String c, String l) {
		a_instructor(p);
		a_lecture(c, l);

		if (!e_instructs(p, c, l)) {
			Instructor instr = null;

			for (Instructor ins : instructors) {
				if (ins.getName().equals(p))
					instr = ins;
			}

			for (Course course : courses) {
				if (course.getName().equals(c))
					course.findLecture(l).setInstructor(instr);
			}
		}
	}

	@Override
	public boolean e_instructs(String p, String c, String l) {
		for (Course course : courses) {
			if (course.getName().equals(c))
				return e_lecture(c, l)
						&& e_instructor(p)
						&& course.findLecture(l).getInstructor().getName()
								.equals(p);
		}
		return false;
	}

	/**
	 * 	Updates the exam length of a specific lecture.
	 */
	@Override
	public void a_examLength(String c, String lec, Long hours) {
		a_lecture(c, lec);
		for (Course course : courses) {
			if (c.equals(course.getName())) {
				course.findLecture(lec).setExamLength(hours);
			}
		}
	}

	@Override
	public boolean e_examLength(String c, String lec, Long hours) {
		for (Course course : courses) {
			if (c.equals(course.getName())) {
				return e_lecture(c, lec)
						&& course.findLecture(lec).getExamLength()
								.equals(hours);
			}
		}
		return false;
	}

	@Override
	public void a_roomAssign(String p, String room) {
		a_session(p);
		a_room(room);
		Room roomset = null;
		for (Room rm : rooms) {
			if (rm.getName().equals(room))
				roomset = rm;
		}

		for (Session session : sessions) {
			if (session.getName().equals(p))
				session.setRoom(roomset);
		}

	}

	@Override
	public boolean e_roomAssign(String p, String room) {
		for (Session session : sessions) {
			if (session.getName().equals(p))
				return session.getRoom().getName().equals(room);
		}
		return false;
	}

	@Override
	public void a_dayAssign(String p, String day) {
		a_session(p);
		a_day(day);
		for (Session session : sessions) {
			if (session.getName().equals(p))
				session.setDay(day);
		}

	}

	@Override
	public boolean e_dayAssign(String p, String day) {
		for (Session session : sessions) {
			if (session.getName().equals(p))
				return e_session(p) && e_day(day)
						&& session.getDay().equals(day);
		}
		return false;
	}

	@Override
	public void a_time(String p, Long time) {
		a_session(p);
		for (Session session : sessions) {
			if (session.getName().equals(p))
				session.setTime(time);
		}

	}

	@Override
	public boolean e_time(String p, Long time) {
		for (Session session : sessions) {
			if (session.getName().equals(p))
				return e_session(p) && session.getTime().equals(time);
		}
		return false;
	}

	@Override
	public void a_length(String p, Long length) {
		a_session(p);
		for (Session session : sessions) {
			if (session.getName().equals(p))
				session.setLength(length);
		}
	}

	@Override
	public boolean e_length(String p, Long length) {
		for (Session session : sessions) {
			if (session.getName().equals(p))
				return e_session(p) && session.getLength().equals(length);
		}
		return false;
	}

	@Override
	public void a_at(String session, String day, Long time, Long length) {
		a_session(session);
		a_dayAssign(session, day);
		a_time(session, time);
		a_length(session, length);
	}

	@Override
	public boolean e_at(String session, String day, Long time, Long length) {
		return e_dayAssign(session, day) && e_time(session, time)
				&& e_length(session, length);
	}

	@Override
	public void a_session(String session, String room, String day, Long time,
			Long length) {
		a_roomAssign(session, room);
		a_dayAssign(session, day);
		a_time(session, time);
		a_length(session, length);
	}

	@Override
	public boolean e_session(String session, String room, String day,
			Long time, Long length) {
		return e_dayAssign(session, day) && e_roomAssign(session, room)
				&& e_time(session, time) && e_length(session, length);
	}

	@Override
	public void a_enrolled(String student, String c, String l) {
		a_student(student);
		a_lecture(c, l);
		Student std = null;

		for (Student stud : students) {
			if (stud.getName().equals(student))
				std = stud;
		}

		for (Course course : courses) {
			if (course.getName().equals(c)) {
				course.findLecture(l).addStudent(std);
			}
		}
	}

	@Override
	public boolean e_enrolled(String student, String c, String l) {
		if (e_lecture(c, l)) {
			for (Course course : courses) {
				if (course.getName().equals(c)) {
					return e_student(student) && e_lecture(c, l)
							&& course.findLecture(l).hasStudent(student);
				}
			}
		}
		return false;
	}

	@Override
	public void a_enrolled(String student, Vector<Pair<ParamType, Object>> list) {
		for (int i = 0; i < list.size(); i += 2) {
			a_enrolled(student, list.elementAt(i).getValue().toString(), list.elementAt(i+1).getValue().toString());
		}

	}

	@Override
	public void a_capacity(String r, Long cap) {
		a_room(r);
		for (Room room : rooms) {
			if (room.getName().equals(r))
				room.setCapacity(cap);
		}

	}

	@Override
	public boolean e_capacity(String r, Long cap) {
		for (Room room : rooms) {
			if (room.getName().equals(r))
				return e_room(r) && room.getCapacity().equals(cap);
		}
		return false;
	}

	@Override
	public void a_assign(String c, String lec, String session) {
		Course course = null;
		Lecture lecture = null;

		for (Course crs : courses) {
			if (crs.getName().equals(c)) {
				course = crs;
			}
		}

		lecture = course.findLecture(lec);

		for (Session sn : sessions) {
			if (sn.getName().equals(session)) {
				sn.setCourse(course);
				sn.setLecture(lecture);
			}
		}

	}

	@Override
	public boolean e_assign(String c, String lec, String session) {
		for (Session sn : sessions) {
			if (sn.getName().equals(session)) {
				return e_session(session) && sn.getCourse().getName().equals(c)
						&& sn.getLecture().getName().equals(lec);
			}
		}

		return false;
	}

	public static EnvironmentInterface get() {
		EnvironmentInterface envI = new Environment("env");
		return envI;
	}

}
