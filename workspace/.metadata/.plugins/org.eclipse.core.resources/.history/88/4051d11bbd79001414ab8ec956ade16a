package examSchedule.parser;

import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.Vector;

import examSchedule.*;

/**
 * This class can function as the main() for your assignment program. Use it in
 * conjunction with the PredicateReader class. You will have to define an
 * environment, which here is represented by the class Environment (you will
 * have to define your own Environment class). Usually, it would be a subclass
 * of PredicateReader.
 * 
 * <p>
 * Copyright: Copyright (c) 2003-2007, Department of Computer Science,
 * University of Calgary. Permission to use, copy, modify, distribute and sell
 * this software and its documentation for any purpose is hereby granted without
 * fee, provided that the above copyright notice appear in all copies and that
 * both that copyright notice and this permission notice appear in supporting
 * documentation. The Department of Computer Science makes no representations
 * about the suitability of this software for any purpose. It is provided
 * "as is" without express or implied warranty.
 * </p>
 * 
 * @author <a href="http://www.cpsc.ucalgary.ca/~kremer/">Rob Kremer</a>
 * 
 */
public class ExamSchedule {

	/**
	 * Interpret the command line, and either run in command mode, perform a
	 * search, or evaluate a solution. There are four acceptable forms of the
	 * command line:
	 * <p>
	 * <ol>
	 * <li>&lt;no params&gt;<blockquote>operates in "
	 * {@link #commandMode(EnvironmentInterface) command mode}"</blockquote>
	 * <li><em>problemFilename</em> <blockquote>reads problemFilename as a data
	 * file and then enters "{@link #commandMode(EnvironmentInterface) command
	 * mode}"</blockquote>
	 * <li><em>problemFilename long</em> <blockquote>reads problemFilename and
	 * then attempts to perform a
	 * {@link #doSearch(EnvironmentInterface, String, long) search} for up to
	 * <em>long</em> milliseconds</blockquote>
	 * <li><em>problemFilename solutionFilename</em> <blockquote>reads
	 * problemFilename and solutionFilename and prints out an evaluation of the
	 * solution</blockquote>
	 * </ol>
	 * Form 3 is the one need to use for the assessment of the assignment. The
	 * other forms are usually useful for development and testing.
	 * <p>
	 * The specified input file (in forms 2-4) is read by calling
	 * {@link EnvironmentInterface#fromFile(String)}.
	 * 
	 * @param args
	 *            the arguments from the command line
	 */
	public static void main(String[] args) {

		final EnvironmentInterface env = Environment.get();

		// long startTime = System.currentTimeMillis();

		String fromFile = null;

		// intialize the the environment from the filename in the first argument
		// on the command line if it's there
		if (args.length > 0) {
			fromFile = args[0];
			env.fromFile(fromFile);
		} else {
			System.out
					.println("Synopsis: ExamSchedule <env-file> [<solution-file>|<time-in-ms>]");
		}
		// if there's a second argument on the command line, it's either
		// a solution file name or a time in milliseconds to limit our run to...
		if (args.length > 1) {
			// let's assume it's a time in milliseconds: we'll do a search on
			// it.

			try {
				long timeLimit = new Long(args[1]).longValue();

				doSearch(env, fromFile + ".out", timeLimit);
			}
			// not a time, so it must be a filename to read a solution to
			// evaluate from...
			catch (NumberFormatException ex) {
				// env.setCurrentSolution(new Solution(args[1]));
			}

			// if we did something usefull above, print the results...
			if (env.getCurrentSolution() != null) {
				// System.out.println(currentSolution.toString());
				System.out.println(((Solution) env.getCurrentSolution())
						.getName()
						+ ": isSolved()    -> "
						+ env.getCurrentSolution().isSolved());
				System.out.println(((Solution) env.getCurrentSolution())
						.getName()
						+ ": getGoodness() -> "
						+ env.getCurrentSolution().getGoodness());
			}

		}
		// The command line had either no arguments or just a input data file
		// (from which we've
		// already initialized (or attempted), so we'll enter command mode...
		else {
			commandMode(env);
		}
	}

	/**
	 * Do a search given the current environment (containing the problem data),
	 * writing it out to <em>outFileName</em>, and limiting ourselves to
	 * <em>timeLimit</em> milliseconds of search. This method uses the arguably
	 * clever ploy of using a shutdown hook to save the results if we terminate
	 * abnormally or are killed before we get around to shutting down ourselves.
	 * 
	 * @param env2
	 *            The environment object that contains all the info about the
	 *            current situation
	 * @param outFileName
	 *            The name of the file to output the solution to.
	 * @param timeLimit
	 *            The number of milliseconds to limit he search to.
	 */
	public static void doSearch(final EnvironmentInterface env,
			final String outFileName, final long timeLimit) {

		// here we need to output the environment data to a file.
		// outputDemo(env2, outFileName);

		Environment env2 = (Environment) env;
		OrBasedSolution oldSolution = new OrBasedSolution(outFileName);
		long timeTakenToPrint = 0;

		// loop until we have just enough time to output our solution
		while (timeLimit != timeTakenToPrint) {
			Vector<Course> courseCopy = env2.courses;
			Vector<Session> sessionCopy = env2.sessions;

			OrBasedSolution newSolution = null;
			newSolution = recursiveSearch(newSolution, courseCopy, sessionCopy);
			if (oldSolution.getGoodness() < newSolution.getGoodness()) {
				oldSolution = newSolution;
			}
		}

		// here we print the solution and append it to the already created
		// environment output file.
		// solutionPrint(oldSolution);

	}

	public static OrBasedSolution recursiveSearch(OrBasedSolution newSolution,
			Vector<Course> courses, Vector<Session> sessions) {
		Vector<Session> possibilities = new Vector<Session>();

		if (courses.size() == 0) {
		}

		for (Course course : courses) {
			for (Lecture lecture : course.getLectures()) {
				for (Session session : sessions) {
					if (session.getLength() >= lecture.getExamLength()) {
						if (!possibilities.contains(session)) {
							possibilities.add(session);
						}
					}
					// assign lecture to some session in possibilities
					// remove lecture.students.size() from
					// session.room.capacity()
					// remove lecture from courses.getLectures
					// if courses.getLectures == 0
					// remove course from courses
					// if courses.size() != 0
					// call yourself with new information

				}
				possibilities = new Vector<Session>();
			}
		}

		return recursiveSearch(newSolution, courses, sessions);
	}

	// this needs to be altered to append the environment information to the
	// already created solution file.
	public static void outputDemo(final Environment env2,
			final String outFileName) {

		// START of writer toFile
		// toFile will create a file of the form inputfile.ext.out as fed by the
		// PredicateReader that created env.
		// writing to toFile O*V*E*R*W*R*I*T*E*S already existent files (of the
		// same name) with the newly created file.
		// toFile should write the the working directory of .jar executed to run
		// this writer.

		PrintWriter toFile;
		try {

			toFile = new PrintWriter(outFileName, "UTF-8");

			for (String day : env2.days) {
				toFile.println("day(" + day + ")");
			}

			for (Course course : env2.courses) {
				toFile.println(course.toString());
			}

			for (Instructor instructor : env2.instructors) {
				toFile.println(instructor.toString());

				for (Lecture lecture : instructor.getLectures()) {
					toFile.println(instructor.instructs(lecture));
				}
			}

			for (Student student : env2.students) {
				toFile.println(student.toString());
				toFile.println(student.toEnrolledList());

				for (Pair<Course, Lecture> courseLecturePair : student
						.getClasses()) {
					toFile.println(student.toEnrolled(courseLecturePair
							.getValue()));
				}
			}

			for (Course course : env2.courses) {
				for (Lecture lecture : course.getLectures()) {

					toFile.println(lecture.toStringTwo());
					toFile.println(lecture.toString());
					toFile.println(lecture.toExamLength());
				}
			}

			for (Room room : env2.rooms) {
				toFile.println(room.toString());
				toFile.println(room.toCapacity());
			}

			for (Session session : env2.sessions) {
				toFile.println(session.toString());
				toFile.println(session.toStringTwo());

				if (session.getDay() != null && session.getTime() != null
						&& session.getLength() != null) {
					toFile.println(session.toAt());
				}

				if (session.getRoom() != null) {
					toFile.println(session.toRoomAssign());
				}

				if (session.getDay() != null) {
					toFile.println(session.toDayAssign());
				}

				if (session.getTime() != null) {
					toFile.println(session.toTime());
				}
			}
			toFile.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Run in "command mode" -- continuously reading predicates from the command
	 * line. If a predicate begins with a "!", then we will attempt to execute
	 * it with a {@link PredicateReader#eval(String)}, otherwise with a
	 * {@link PredicateReader#assert_(String)}. Special tokens handled
	 * anomalously are:
	 * <ul>
	 * <li>exit // exits the program
	 * <li>? // executes the prediate "!help()"
	 * <li>help // executes the prediate "!help()"
	 * </ul>
	 * 
	 * @param env
	 */
	public static void commandMode(final EnvironmentInterface env) {
		final int maxBuf = 200;
		byte[] buf = new byte[maxBuf];
		int length;
		try {
			System.out
					.print("\nTAallocation: query using predicates, assert using \"!\" prefixing predicates;\n !exit() to quit; !help() for help.\n\n> ");
			while ((length = System.in.read(buf)) != -1) {
				String s = new String(buf, 0, length);
				s = s.trim();
				if (s.equals("exit"))
					break;
				if (s.equals("?") || s.equals("help")) {
					s = "!help()";
					System.out.println("> !help()");
				}
				if (s.length() > 0) {
					if (s.charAt(0) == '!')
						env.assert_(s.substring(1));
					else
						System.out.print(" --> " + env.eval(s));
				}
				System.out.print("\n> ");
			}
		} catch (Exception e) {
			System.err.println("exiting: " + e.toString());
		}
	}

}
